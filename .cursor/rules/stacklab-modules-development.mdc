---
alwaysApply: true
description: Guia completo para desenvolvimento de scripts e m√≥dulos StackLab
---

# Guia de Desenvolvimento - M√≥dulos StackLab

Este guia estabelece as melhores pr√°ticas para desenvolvimento de scripts e m√≥dulos para o ecossistema StackLab, focando em customiza√ß√µes do Chatwoot via Dashboard Scripts.

## Estrutura Base de Scripts

### Template Padr√£o para M√≥dulos StackLab

```javascript
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Aguardar carregamento completo da aplica√ß√£o Vue
  const waitForVue = setInterval(() => {
    if (window.__vue__) {
      clearInterval(waitForVue);
      initializeStackLabModule();
    }
  }, 500);

  function initializeStackLabModule() {
    console.log('M√≥dulo StackLab inicializado');
    
    // Verificar se o m√≥dulo j√° foi carregado
    if (window.stackLabModuleLoaded) return;
    window.stackLabModuleLoaded = true;
    
    // Implementar funcionalidade do m√≥dulo
    implementarModulo();
  }

  function implementarModulo() {
    // C√≥digo do m√≥dulo aqui
  }
});
</script>
```

## Diretrizes de Desenvolvimento

### 1. Princ√≠pios Fundamentais

- **M√≠nimo C√≥digo**: Use sempre o m√≠nimo de c√≥digo poss√≠vel
- **M√≠nima Mudan√ßa**: Fa√ßa a menor altera√ß√£o necess√°ria no c√≥digo atual
- **N√£o Duplica√ß√£o**: Sempre verificar se elementos j√° existem antes de criar
- **Performance**: Usar observers para mudan√ßas din√¢micas no DOM

### 2. Estrutura de Arquivos

```
Modulos StackLab/
‚îú‚îÄ‚îÄ .cursor/
‚îÇ   ‚îî‚îÄ‚îÄ rules/
‚îÇ       ‚îî‚îÄ‚îÄ stacklab-modules-development.mdc
‚îú‚îÄ‚îÄ modules/
‚îÇ   ‚îú‚îÄ‚îÄ kanban-enhancements/
‚îÇ   ‚îú‚îÄ‚îÄ sidebar-customizations/
‚îÇ   ‚îú‚îÄ‚îÄ chat-automations/
‚îÇ   ‚îî‚îÄ‚îÄ dashboard-widgets/
‚îî‚îÄ‚îÄ scripts/
    ‚îú‚îÄ‚îÄ utils/
    ‚îî‚îÄ‚îÄ templates/
```

### 3. Padr√µes de Nomenclatura

- **M√≥dulos**: `stacklab-[funcionalidade]-module`
- **Classes CSS**: `sl-[componente]-[elemento]`
- **IDs**: `stacklab-[modulo]-[elemento]`
- **Fun√ß√µes**: `stackLab[Modulo][Acao]()`

## Componentes Principais para Customiza√ß√£o

### Kanban (Prioridade Alta)
```javascript
// Seletores importantes
const KANBAN_SELECTORS = {
  container: '.kanban-container',
  item: '.kanban-item',
  header: '.kanban-header',
  column: '.kanban-column',
  actions: '.kanban-actions'
};
```

### Sidebar
```javascript
// Seletores do sidebar
const SIDEBAR_SELECTORS = {
  primary: '.primary-sidebar',
  secondary: '.secondary-sidebar',
  menuItem: '.sidebar-menu-item'
};
```

### Lista de Conversas
```javascript
// Seletores de conversas
const CHAT_SELECTORS = {
  list: '.conversation-list',
  item: '.conversation-item',
  view: '.conversation-view'
};
```

## Template de M√≥dulo Completo

### Estrutura Base

```javascript
function criarModuloStackLab(config) {
  const {
    moduleName,
    selector,
    styles,
    functionality,
    shortcuts
  } = config;

  // 1. Verificar se j√° existe
  if (document.getElementById(`stacklab-${moduleName}`)) return;

  // 2. Aplicar estilos
  if (styles) {
    const style = document.createElement('style');
    style.id = `stacklab-${moduleName}-styles`;
    style.innerHTML = styles;
    document.head.appendChild(style);
  }

  // 3. Criar elementos DOM
  const moduleContainer = document.createElement('div');
  moduleContainer.id = `stacklab-${moduleName}`;
  
  // 4. Implementar funcionalidade
  if (functionality) {
    functionality(moduleContainer);
  }

  // 5. Adicionar atalhos
  if (shortcuts) {
    adicionarAtalhos(shortcuts);
  }

  // 6. Observer para mudan√ßas din√¢micas
  const observer = new MutationObserver(() => {
    if (!document.getElementById(`stacklab-${moduleName}`)) {
      criarModuloStackLab(config);
    }
  });

  observer.observe(document.body, { childList: true, subtree: true });
}
```

### Exemplo Pr√°tico: M√≥dulo de Exporta√ß√£o Kanban

```javascript
function criarModuloExportacaoKanban() {
  criarModuloStackLab({
    moduleName: 'kanban-export',
    selector: '.kanban-header',
    styles: `
      .sl-export-btn {
        background: #84CC16;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        margin-left: 8px;
      }
      .sl-export-btn:hover {
        background: #65A30D;
      }
    `,
    functionality: (container) => {
      const header = document.querySelector('.kanban-header');
      if (!header) return;

      const exportBtn = document.createElement('button');
      exportBtn.className = 'sl-export-btn';
      exportBtn.innerHTML = 'üìä Exportar';
      exportBtn.onclick = () => exportarDadosKanban();

      header.appendChild(exportBtn);
    },
    shortcuts: {
      'Alt+E': () => exportarDadosKanban()
    }
  });
}

function exportarDadosKanban() {
  // Acessar dados via Vue
  const vueInstance = window.__vue__;
  if (!vueInstance) return;

  const store = vueInstance.$store;
  const kanbanItems = store.getters['kanban/getKanbanItems'] || [];
  
  // Gerar e baixar CSV
  const csv = gerarCSV(kanbanItems);
  baixarArquivo(csv, 'kanban-export.csv');
}
```

## Utilit√°rios Comuns

### Acesso ao Estado Vue/Vuex

```javascript
function acessarEstadoVue() {
  const vue = window.__vue__;
  if (!vue) return null;
  
  return {
    instance: vue,
    store: vue.$store,
    router: vue.$router,
    currentUser: vue.$store.getters.getCurrentUser,
    kanbanItems: vue.$store.getters['kanban/getKanbanItems']
  };
}
```

### Helpers de DOM

```javascript
const StackLabUtils = {
  // Aguardar elemento aparecer no DOM
  waitForElement: (selector, timeout = 5000) => {
    return new Promise((resolve, reject) => {
      const element = document.querySelector(selector);
      if (element) return resolve(element);

      const observer = new MutationObserver(() => {
        const element = document.querySelector(selector);
        if (element) {
          observer.disconnect();
          resolve(element);
        }
      });

      observer.observe(document.body, { childList: true, subtree: true });

      setTimeout(() => {
        observer.disconnect();
        reject(new Error(`Elemento ${selector} n√£o encontrado em ${timeout}ms`));
      }, timeout);
    });
  },

  // Criar elemento com atributos
  createElement: (tag, attributes = {}, children = []) => {
    const element = document.createElement(tag);
    
    Object.entries(attributes).forEach(([key, value]) => {
      if (key === 'style' && typeof value === 'object') {
        Object.assign(element.style, value);
      } else {
        element.setAttribute(key, value);
      }
    });

    children.forEach(child => {
      if (typeof child === 'string') {
        element.innerHTML += child;
      } else {
        element.appendChild(child);
      }
    });

    return element;
  },

  // Adicionar CSS
  addCSS: (css, id) => {
    if (document.getElementById(id)) return;
    
    const style = document.createElement('style');
    style.id = id;
    style.innerHTML = css;
    document.head.appendChild(style);
  }
};
```

### Sistema de Atalhos

```javascript
function adicionarAtalhos(shortcuts) {
  document.addEventListener('keydown', (e) => {
    const key = `${e.altKey ? 'Alt+' : ''}${e.ctrlKey ? 'Ctrl+' : ''}${e.shiftKey ? 'Shift+' : ''}${e.code.replace('Key', '')}`;
    
    if (shortcuts[key]) {
      e.preventDefault();
      shortcuts[key]();
    }
  });
}
```

## Instala√ß√£o e Deploy

### 1. Instala√ß√£o via Dashboard Scripts

1. Acesse `https://seuchatwoot.com/super_admin/dashboard_scripts`
2. Cole o c√≥digo do m√≥dulo
3. Salve as altera√ß√µes

### 2. Desenvolvimento Local

Para desenvolver e testar m√≥dulos localmente:

```javascript
// Usar este snippet para injetar durante desenvolvimento
(function() {
  const script = document.createElement('script');
  script.src = 'http://localhost:3000/seu-modulo.js';
  document.head.appendChild(script);
})();
```

## Melhores Pr√°ticas

### Performance
- Use `requestAnimationFrame` para anima√ß√µes
- Debounce eventos frequentes (scroll, resize)
- Cache seletores DOM reutilizados

### Compatibilidade
- Sempre verificar se APIs/elementos existem antes de usar
- Implementar fallbacks para funcionalidades opcionais
- Testar em diferentes navegadores

### Manutenibilidade
- Comentar c√≥digo complexo
- Usar nomes descritivos para vari√°veis e fun√ß√µes
- Modularizar funcionalidades grandes

### Seguran√ßa
- Sanitizar dados de entrada
- Evitar `eval()` e `innerHTML` com dados n√£o confi√°veis
- Validar permiss√µes antes de executar a√ß√µes

## Debugging e Desenvolvimento

### Console de Debug

```javascript
// Adicionar ao final do script para debug
if (localStorage.getItem('stacklab-debug') === 'true') {
  window.StackLabDebug = {
    vue: window.__vue__,
    store: window.__vue__?.$store,
    modules: Object.keys(window).filter(k => k.startsWith('stackLab'))
  };
  console.log('StackLab Debug Mode:', window.StackLabDebug);
}
```

### Ativar debug no console:
```javascript
localStorage.setItem('stacklab-debug', 'true');
location.reload();
```

Este guia deve ser seguido para manter consist√™ncia e qualidade no desenvolvimento dos m√≥dulos StackLab.